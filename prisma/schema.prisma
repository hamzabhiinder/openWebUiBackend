// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  password     String
  avatar       String?
  googleId     String?  @unique
  plan         Plan     @default(FREE)
  isAdmin      Boolean  @default(false)
  apiUsage     Int      @default(0)
  monthlyLimit Int      @default(10000)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  chats     Chat[]
  payments  Payment[]
  apiUsages ApiUsage[]
  sessions  Session[]
  files     File[]

  @@map("users")
}

model AiModel {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  provider    String
  description String?
  apiKey      String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_models")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  title     String
  model     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("chats")
}

model Message {
  id        String      @id @default(cuid())
  chatId    String
  role      MessageRole
  content   String      @db.Text
  tokens    Int?
  timestamp DateTime    @default(now())
  files     Json?       // Store file references

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model File {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  extractedText String? @db.Text
  openaiFileId String? // OpenAI Files API ID
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  amount      Float
  currency    String        @default("USD")
  status      PaymentStatus @default(PENDING)
  plan        Plan
  provider    PaymentProvider
  providerId  String?       // External payment ID
  metadata    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  model     String
  tokens    Int
  cost      Float
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_usage")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String @db.Text

  @@map("system_settings")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum MessageRole {
  USER
  ASSISTANT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
  MERCADOPAGO
}